# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

networks:
  byfn:

services:

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer0.org1.example.com
    networks:
      - byfn

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer1.org1.example.com
    networks:
      - byfn

  peer2.org1.example.com:
    container_name: peer2.org1.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer2.org1.example.com
    networks:
      - byfn

  peer3.org1.example.com:
    container_name: peer3.org1.example.com
    extends:
      file:  base/docker-compose-base.yaml
      service: peer3.org1.example.com
    networks:
      - byfn

  ca.example.com:
    image: hyperledger/fabric-ca:x86_64-1.1.0
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.example.com
     # - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
     # - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/4239aa0dcd76daeeb8ba0cda701851d14504d31aad1b2ddddbac6a57365e497c_sk
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./ca/data:/etc/hyperledger/fabric-ca-server
      - ./ca/msp:/msp
      - ./crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca.example.com
    networks:
      - byfn
  
  # TODO Kafka
  # kafka0:
  #   image: hyperledger/fabric-kafka:x86_64-1.0.6
  #   restart: always
  #   tty: true
  #   container_name: kafka0
  #   hostname: kafka0
  #   environment:
  #     - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
  #     - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
  #     - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
  #     - KAFKA_LOG_RETENTION_MS=-1
  #     - KAFKA_BROKER_ID=0
  #     - KAFKA_MIN_INSYNC_REPLICAS=2
  #     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
  #   depends_on:
  #     - zookeeper0
  #     - zookeeper1
  #     - zookeeper2
  #   expose:
  #     - '9092'
  #   networks:
  #     - byfn

  # kafka1:
  #   image: hyperledger/fabric-kafka:x86_64-1.0.6
  #   restart: always
  #   tty: true
  #   container_name: kafka1
  #   hostname: kafka1
  #   environment:
  #     - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
  #     - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
  #     - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
  #     - KAFKA_LOG_RETENTION_MS=-1
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_MIN_INSYNC_REPLICAS=2
  #     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
  #   depends_on:
  #     - zookeeper0
  #     - zookeeper1
  #     - zookeeper2
  #   expose:
  #     - '9092'
  #   networks:
  #     - byfn

  # kafka2:
  #   image: hyperledger/fabric-kafka:x86_64-1.0.6
  #   restart: always
  #   tty: true
  #   container_name: kafka2
  #   hostname: kafka2
  #   environment:
  #     - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
  #     - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
  #     - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
  #     - KAFKA_LOG_RETENTION_MS=-1
  #     - KAFKA_BROKER_ID=2
  #     - KAFKA_MIN_INSYNC_REPLICAS=2
  #     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
  #   depends_on:
  #     - zookeeper0
  #     - zookeeper1
  #     - zookeeper2
  #   expose:
  #     - '9092'
  #   networks:
  #     - byfn

  # kafka3:
  #   image: hyperledger/fabric-kafka:x86_64-1.0.6
  #   restart: always
  #   tty: true
  #   container_name: kafka3
  #   hostname: kafka3
  #   environment:
  #     - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
  #     - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
  #     - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
  #     - KAFKA_LOG_RETENTION_MS=-1
  #     - KAFKA_BROKER_ID=3
  #     - KAFKA_MIN_INSYNC_REPLICAS=2
  #     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
  #   depends_on:
  #     - zookeeper0
  #     - zookeeper1
  #     - zookeeper2
  #   expose:
  #     - '9092'
  #   networks:
  #     - byfn

  # zookeeper0:
  #   image: hyperledger/fabric-zookeeper:x86_64-1.0.6
  #   restart: always
  #   tty: true
  #   container_name: zookeeper0
  #   hostname: zookeeper0
  #   environment:
  #     - ZOO_MY_ID=1
  #     - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
  #   expose:
  #     - '2181'
  #     - '2888'
  #     - '3888'
  #   networks:
  #     - byfn
      
  # zookeeper1:
  #   image: hyperledger/fabric-zookeeper:x86_64-1.0.6
  #   restart: always
  #   tty: true
  #   container_name: zookeeper1
  #   hostname: zookeeper1
  #   environment:
  #     - ZOO_MY_ID=2
  #     - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
  #   expose:
  #     - '2181'
  #     - '2888'
  #     - '3888'
  #   networks:
  #     - byfn

  # zookeeper2:
  #   image: hyperledger/fabric-zookeeper:x86_64-1.0.6
  #   restart: always
  #   tty: true
  #   container_name: zookeeper2
  #   hostname: zookeeper2
  #   environment:
  #     - ZOO_MY_ID=3
  #     - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
  #   expose:
  #     - '2181'
  #     - '2888'
  #     - '3888'
  #   networks:
  #     - byfn
  
  orderer.example.com:
    extends:
      file:   base/docker-compose-base.yaml
      service: orderer.example.com
    # environment:
    #   - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
    #   - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
    #   - ORDERER_KAFKA_VERBOSE=true
    container_name: orderer.example.com
    # depends_on:
    #   - kafka0
    #   - kafka1
    #   - kafka2
    #   - kafka3
    networks:
      - byfn

  cli:
    container_name: cli
    image: hyperledger/fabric-tools:x86_64-1.1.0
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash -c './scripts/script_reduced.sh ${CHANNEL_NAME} ${DELAY}; sleep infinity' #use $TIMEOUT
    volumes:
        - /var/run/:/host/var/run/
        - ./chaincode/smartfactory/src/github.com/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
        - ./chaincode:/opt/gopath/src/github.com/hyperledger/fabric/chaincode
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - ca.example.com
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer2.org1.example.com
      - peer3.org1.example.com
    networks:
      - byfn

  explorer:
    image: yeasy/blockchain-explorer:0.1.0-preview
    container_name: blockchain_explorer
    hostname: explorer
    volumes:
      - ./explorer-artifacts/config.json:/blockchain-explorer/config.json
      - ./crypto-config:/blockchain-explorer/first-network/crypto-config
    ports:
      - "8180:8080"
    depends_on:
      - mysql
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer2.org1.example.com
      - peer3.org1.example.com
    links:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer2.org1.example.com
      - peer3.org1.example.com
    command: bash -c 'sleep 30; node main.js'
    networks:
      - byfn

  mysql: # mysql service
    image: mysql:5.7
    container_name: mysql
    hostname: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=fabricexplorer
      #- STARTUP_SQL=/fabricexplorer.sql
    volumes:
      #- ./explorer-artifacts/fabricexplorer.sql:/docker-entrypoint-initdb.d/fabricexplorer.sql
      - ./data/mysql:/var/lib/mysql
    expose:
      - "3306"
    command: mysqld
    networks:
      - byfn
  
  composer: #composer service
    image: hyperledger/composer-playground:0.19.0-20180323121202
    container_name: composer-playground
    ports:
      - "8080:8080"
    networks:
     - byfn
